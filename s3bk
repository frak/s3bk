#!/usr/bin/env php
<?php

error_reporting(~E_NOTICE);

require_once 'Core/Autoloader.php';

$user = get_current_user();

$command = null;
if (!isset($argv[1])) {
    die("Usage:\n" . __FILE__
        . " command (parameters)\nTo see available commands use the command 'help'\n");
}

switch ($argv[1]) {
    case 'list':
        $command = new \Command\ListMounts();
        break;
    case 'mount':
        if (count($argv) >= 4) {
            if (\Core\Mount::exists($argv[3])) {
                die("Mount point '{$argv[3]}' already exists\n");
            }
            $path = $argv[2];
            if ($path[strlen($path) - 1] !== '/') {
                $path .= '/';
            }
            $type    = (isset($argv[4])) ? $argv[4] : 'backup';
            $vers    = (isset($argv[5]) && 'versioned' == $argv[5]) ? true
                : false;
            $command = new \Command\Mount();
            $command->setKey('path', $path);
            $command->setKey('name', $argv[3]);
            $command->setKey('type', $type);
            $command->setKey('versioned', $vers);
            $command->setKey('user', $user);
        } else {
            die("Usage:\n" . __FILE__ . " mount /path/to/mount name\n");
        }
        break;
    case 'remove':
        if (count($argv) > 2) {
            if (\Core\Mount::exists($argv[2])) {
                $command = new \Command\Remove();
                $command->setKey('name', $argv[2]);
                $command->setKey('user', $user);
                $command->setKey(
                    'force',
                    (isset($argv[3]) && 'force' == $argv[3]) ? true : false
                );
            } else {
                die("Mount '{$argv[2]}' does not exist");
            }
        } else {
            die("Usage:\n" . __FILE__ . " remove name\n");
        }
        break;
    case 'backup':
        if (3 === count($argv)) {
            if (\Core\Mount::exists($argv[2])) {
                $command = new \Command\Backup();
                $command->setKey('name', $argv[2]);
                $command->setKey('user', $user);
                $command->setKey(
                    'pbar', new \Console_ProgressBar(
                        '* %fraction% KB [%bar%] %percent%', '=>', ' ', 100, 1
                    )
                );
                $command->setKey('db', new \Core\Database($argv[2]));
            } else {
                die("Mount '{$argv[2]}' does not exist");
            }
        } else {
            die("Usage:\n" . __FILE__ . " backup name\n");
        }
        break;
    case 'restore':
        if (3 === count($argv)) {
            if (\Core\Mount::exists($argv[2])) {
                $command = new \Command\Restore();
                $command->setKey('name', $argv[2]);
                $command->setKey('user', $user);
                $command->setKey(
                    'pbar', new \Console_ProgressBar(
                        '* %fraction% KB [%bar%] %percent%', '=>', ' ', 100, 1
                    )
                );
            } else {
                die("Mount '{$argv[2]}' does not exist");
            }
        } else {
            die("Usage:\n" . __FILE__ . " restore name\n");
        }
        break;
    case 'interval':
        if (4 === count($argv)) {
            if (\Core\Mount::exists($argv[2])) {
                $command = new \Command\Interval();
                $command->setKey('name', $argv[2]);
                $command->setKey('user', $user);
                $command->setKey('interval', $argv[3]);
            } else {
                die("Mount '{$argv[2]}' does not exist");
            }
        } else {
            die("Usage:\n" . __FILE__ . " interval name 30|2h5m|clear\n");
        }
        break;
    case 'help':
    default:
        $command = new \Command\Help();
        if (3 === count($argv)) {
            $command->setKey('command', $argv[2]);
        } else {
            $command->setKey('command', 'all');
        }
        break;
}

$command->run();

